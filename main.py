from typing import *
import nextcord
from nextcord import *
from nextcord.ext import commands
import json
import random
from datetime import datetime, timedelta
import time
import math
import requests
from bs4 import BeautifulSoup
from nextcord.ui import Button, View



intents = nextcord.Intents.all()
bot = commands.Bot(intents=intents)
    
import random
def nyehwing():
    one = random.choice(["가", "각", "간", "갇", "갈", "갉", "갊", "감", "갑", "값", "갓", "갔", "강", "갖", "갗", "같", "갚", "갛", "개", "객", "갠", "갤", "갬", "갭", "갯", "갰", "갱", "갸", "갹", "갼", "걀", "걋", "걍", "걔", "걘", "걜", "거", "걱", "건", "걷", "걸", "걺", "검", "겁", "것", "겄", "겅", "겆", "겉", "겊", "겋", "게", "겐", "겔", "겜", "겝", "겟", "겠", "겡", "겨", "격", "겪", "견", "겯", "결", "겸", "겹", "겻", "겼", "경", "곁", "계", "곈", "곌", "곕", "곗", "고", "곡", "곤", "곧", "골", "곪", "곬", "곯", "곰", "곱", "곳", "공", "곶", "과", "곽", "관", "괄", "괆", "괌", "괍", "괏", "광", "괘", "괜", "괠", "괩", "괬", "괭", "괴", "괵", "괸", "괼", "굄", "굅", "굇", "굉", "교", "굔", "굘", "굡", "굣", "구", "국", "군", "굳", "굴", "굵", "굶", "굻", "굼", "굽", "굿", "궁", "궂", "궈", "궉", "권", "궐", "궜", "궝", "궤", "궷", "귀", "귁", "귄", "귈", "귐", "귑", "귓", "규", "균", "귤", "그", "극", "근", "귿", "글", "긁", "금", "급", "긋", "긍", "긔", "기", "긱", "긴", "긷", "길", "긺", "김", "깁", "깃", "깅", "깆", "깊", "까", "깍", "깎", "깐", "깔", "깖", "깜", "깝", "깟", "깠", "깡", "깥", "깨", "깩", "깬", "깰", "깸", "깹", "깻", "깼", "깽", "꺄", "꺅", "꺌", "꺼", "꺽", "꺾", "껀", "껄", "껌", "껍", "껏", "껐", "껑", "께", "껙", "껜", "껨", "껫", "껭", "껴", "껸", "껼", "꼇", "꼈", "꼍", "꼐", "꼬", "꼭", "꼰", "꼲", "꼴", "꼼", "꼽", "꼿", "꽁", "꽂", "꽃", "꽈", "꽉", "꽐", "꽜", "꽝", "꽤", "꽥", "꽹", "꾀", "꾄", "꾈", "꾐", "꾑", "꾕", "꾜", "꾸", "꾹", "꾼", "꿀", "꿇", "꿈", "꿉", "꿋", "꿍", "꿎", "꿔", "꿜", "꿨", "꿩", "꿰", "꿱", "꿴", "꿸", "뀀", "뀁", "뀄", "뀌", "뀐", "뀔", "뀜", "뀝", "뀨", "끄", "끅", "끈", "끊", "끌", "끎", "끓", "끔", "끕", "끗", "끙", "끝", "끼", "끽", "낀", "낄", "낌", "낍", "낏", "낑", "나", "낙", "낚", "난", "낟", "날", "낡", "낢", "남", "납", "낫", "났", "낭", "낮", "낯", "낱", "낳", "내", "낵", "낸", "낼", "냄", "냅", "냇", "냈", "냉", "냐", "냑", "냔", "냘", "냠", "냥", "너", "넉", "넋", "넌", "널", "넒", "넓", "넘", "넙", "넛", "넜", "넝", "넣", "네", "넥", "넨", "넬", "넴", "넵", "넷", "넸", "넹", "녀", "녁", "년", "녈", "념", "녑", "녔", "녕", "녘", "녜", "녠", "노", "녹", "논", "놀", "놂", "놈", "놉", "놋", "농", "높", "놓", "놔", "놘", "놜", "놨", "뇌", "뇐", "뇔", "뇜", "뇝", "뇟", "뇨", "뇩", "뇬", "뇰", "뇹", "뇻", "뇽", "누", "눅", "눈", "눋", "눌", "눔", "눕", "눗", "눙", "눠", "눴", "눼", "뉘", "뉜", "뉠", "뉨", "뉩", "뉴", "뉵", "뉼", "늄", "늅", "늉", "느", "늑", "는", "늘", "늙", "늚", "늠", "늡", "늣", "능", "늦", "늪", "늬", "늰", "늴", "니", "닉", "닌", "닐", "닒", "님", "닙", "닛", "닝", "닢", "다", "닥", "닦", "단", "닫", "달", "닭", "닮", "닯", "닳", "담", "답", "닷", "닸", "당", "닺", "닻", "닿", "대", "댁", "댄", "댈", "댐", "댑", "댓", "댔", "댕", "댜", "더", "덕", "덖", "던", "덛", "덜", "덞", "덟", "덤", "덥", "덧", "덩", "덫", "덮", "데", "덱", "덴", "델", "뎀", "뎁", "뎃", "뎄", "뎅", "뎌", "뎐", "뎔", "뎠", "뎡", "뎨", "뎬", "도", "독", "돈", "돋", "돌", "돎", "돐", "돔", "돕", "돗", "동", "돛", "돝", "돠", "돤", "돨", "돼", "됐", "되", "된", "될", "됨", "됩", "됫", "됴", "두", "둑", "둔", "둘", "둠", "둡", "둣", "둥", "둬", "뒀", "뒈", "뒝", "뒤", "뒨", "뒬", "뒵", "뒷", "뒹", "듀", "듄", "듈", "듐", "듕", "드", "득", "든", "듣", "들", "듦", "듬", "듭", "듯", "등", "듸", "디", "딕", "딘", "딛", "딜", "딤", "딥", "딧", "딨", "딩", "딪", "따", "딱", "딴", "딸", "땀", "땁", "땃", "땄", "땅", "땋", "때", "땍", "땐", "땔", "땜", "땝", "땟", "땠", "땡", "떠", "떡", "떤", "떨", "떪", "떫", "떰", "떱", "떳", "떴", "떵", "떻", "떼", "떽", "뗀", "뗄", "뗌", "뗍", "뗏", "뗐", "뗑", "뗘", "뗬", "또", "똑", "똔", "똘", "똥", "똬", "똴", "뙈", "뙤", "뙨", "뚜", "뚝", "뚠", "뚤", "뚫", "뚬", "뚱", "뛔", "뛰", "뛴", "뛸", "뜀", "뜁", "뜅", "뜨", "뜩", "뜬", "뜯", "뜰", "뜸", "뜹", "뜻", "띄", "띈", "띌", "띔", "띕", "띠", "띤", "띨", "띰", "띱", "띳", "띵", "라", "락", "란", "랄", "람", "랍", "랏", "랐", "랑", "랒", "랖", "랗", "래", "랙", "랜", "랠", "램", "랩", "랫", "랬", "랭", "랴", "략", "랸", "럇", "량", "러", "럭", "런", "럴", "럼", "럽", "럿", "렀", "렁", "렇", "레", "렉", "렌", "렐", "렘", "렙", "렛", "렝", "려", "력", "련", "렬", "렴", "렵", "렷", "렸", "령", "례", "롄", "롑", "롓", "로", "록", "론", "롤", "롬", "롭", "롯", "롱", "롸", "롼", "뢍", "뢨", "뢰", "뢴", "뢸", "룀", "룁", "룃", "룅", "료", "룐", "룔", "룝", "룟", "룡", "루", "룩", "룬", "룰", "룸", "룹", "룻", "룽", "뤄", "뤘", "뤠", "뤼", "뤽", "륀", "륄", "륌", "륏", "륑", "류", "륙", "륜", "률", "륨", "륩", "륫", "륭", "르", "륵", "른", "를", "름", "릅", "릇", "릉", "릊", "릍", "릎", "리", "릭", "린", "릴", "림", "립", "릿", "링", "마", "막", "만", "많", "맏", "말", "맑", "맒", "맘", "맙", "맛", "망", "맞", "맡", "맣", "매", "맥", "맨", "맬", "맴", "맵", "맷", "맸", "맹", "맺", "먀", "먁", "먈", "먕", "머", "먹", "먼", "멀", "멂", "멈", "멉", "멋", "멍", "멎", "멓", "메", "멕", "멘", "멜", "멤", "멥", "멧", "멨", "멩", "며", "멱", "면", "멸", "몃", "몄", "명", "몇", "몌", "모", "목", "몫", "몬", "몰", "몲", "몸", "몹", "못", "몽", "뫄", "뫈", "뫘", "뫙", "뫼", "묀", "묄", "묍", "묏", "묑", "묘", "묜", "묠", "묩", "묫", "무", "묵", "묶", "문", "묻", "물", "묽", "묾", "뭄", "뭅", "뭇", "뭉", "뭍", "뭏", "뭐", "뭔", "뭘", "뭡", "뭣", "뭬", "뮈", "뮌", "뮐", "뮤", "뮨", "뮬", "뮴", "뮷", "므", "믄", "믈", "믐", "믓", "미", "믹", "민", "믿", "밀", "밂", "밈", "밉", "밋", "밌", "밍", "및", "밑", "바", "박", "밖", "밗", "반", "받", "발", "밝", "밞", "밟", "밤", "밥", "밧", "방", "밭", "배", "백", "밴", "밸", "뱀", "뱁", "뱃", "뱄", "뱅", "뱉", "뱌", "뱍", "뱐", "뱝", "버", "벅", "번", "벋", "벌", "벎", "범", "법", "벗", "벙", "벚", "베", "벡", "벤", "벧", "벨", "벰", "벱", "벳", "벴", "벵", "벼", "벽", "변", "별", "볍", "볏", "볐", "병", "볕", "볘", "볜", "보", "복", "볶", "본", "볼", "봄", "봅", "봇", "봉", "봐", "봔", "봤", "봬", "뵀", "뵈", "뵉", "뵌", "뵐", "뵘", "뵙", "뵤", "뵨", "부", "북", "분", "붇", "불", "붉", "붊", "붐", "붑", "붓", "붕", "붙", "붚", "붜", "붤", "붰", "붸", "뷔", "뷕", "뷘", "뷜", "뷩", "뷰", "뷴", "뷸", "븀", "븃", "븅", "브", "븍", "븐", "블", "븜", "븝", "븟", "비", "빅", "빈", "빌", "빎", "빔", "빕", "빗", "빙", "빚", "빛", "빠", "빡", "빤", "빨", "빪", "빰", "빱", "빳", "빴", "빵", "빻", "빼", "빽", "뺀", "뺄", "뺌", "뺍", "뺏", "뺐", "뺑", "뺘", "뺙", "뺨", "뻐", "뻑", "뻔", "뻗", "뻘", "뻠", "뻣", "뻤", "뻥", "뻬", "뼁", "뼈", "뼉", "뼘", "뼙", "뼛", "뼜", "뼝", "뽀", "뽁", "뽄", "뽈", "뽐", "뽑", "뽕", "뾔", "뾰", "뿅", "뿌", "뿍", "뿐", "뿔", "뿜", "뿟", "뿡", "쀼", "쁑", "쁘", "쁜", "쁠", "쁨", "쁩", "삐", "삑", "삔", "삘", "삠", "삡", "삣", "삥", "사", "삭", "삯", "산", "삳", "살", "삵", "삶", "삼", "삽", "삿", "샀", "상", "샅", "새", "색", "샌", "샐", "샘", "샙", "샛", "샜", "생", "샤", "샥", "샨", "샬", "샴", "샵", "샷", "샹", "섀", "섄", "섈", "섐", "섕", "서", "석", "섞", "섟", "선", "섣", "설", "섦", "섧", "섬", "섭", "섯", "섰", "성", "섶", "세", "섹", "센", "셀", "셈", "셉", "셋", "셌", "셍", "셔", "셕", "션", "셜", "셤", "셥", "셧", "셨", "셩", "셰", "셴", "셸", "솅", "소", "속", "솎", "손", "솔", "솖", "솜", "솝", "솟", "송", "솥", "솨", "솩", "솬", "솰", "솽", "쇄", "쇈", "쇌", "쇔", "쇗", "쇘", "쇠", "쇤", "쇨", "쇰", "쇱", "쇳", "쇼", "쇽", "숀", "숄", "숌", "숍", "숏", "숑", "수", "숙", "순", "숟", "술", "숨", "숩", "숫", "숭", "숯", "숱", "숲", "숴", "쉈", "쉐", "쉑", "쉔", "쉘", "쉠", "쉥", "쉬", "쉭", "쉰", "쉴", "쉼", "쉽", "쉿", "슁", "슈", "슉", "슐", "슘", "슛", "슝", "스", "슥", "슨", "슬", "슭", "슴", "습", "슷", "승", "시", "식", "신", "싣", "실", "싫", "심", "십", "싯", "싱", "싶", "싸", "싹", "싻", "싼", "쌀", "쌈", "쌉", "쌌", "쌍", "쌓", "쌔", "쌕", "쌘", "쌜", "쌤", "쌥", "쌨", "쌩", "썅", "써", "썩", "썬", "썰", "썲", "썸", "썹", "썼", "썽", "쎄", "쎈", "쎌", "쏀", "쏘", "쏙", "쏜", "쏟", "쏠", "쏢", "쏨", "쏩", "쏭", "쏴", "쏵", "쏸", "쐈", "쐐", "쐤", "쐬", "쐰", "쐴", "쐼", "쐽", "쑈", "쑤", "쑥", "쑨", "쑬", "쑴", "쑵", "쑹", "쒀", "쒔", "쒜", "쒸", "쒼", "쓩", "쓰", "쓱", "쓴", "쓸", "쓺", "쓿", "씀", "씁", "씌", "씐", "씔", "씜", "씨", "씩", "씬", "씰", "씸", "씹", "씻", "씽", "아", "악", "안", "앉", "않", "알", "앍", "앎", "앓", "암", "압", "앗", "았", "앙", "앝", "앞", "애", "액", "앤", "앨", "앰", "앱", "앳", "앴", "앵", "야", "약", "얀", "얄", "얇", "얌", "얍", "얏", "양", "얕", "얗", "얘", "얜", "얠", "얩", "어", "억", "언", "얹", "얻", "얼", "얽", "얾", "엄", "업", "없", "엇", "었", "엉", "엊", "엌", "엎", "에", "엑", "엔", "엘", "엠", "엡", "엣", "엥", "여", "역", "엮", "연", "열", "엶", "엷", "염", "엽", "엾", "엿", "였", "영", "옅", "옆", "옇", "예", "옌", "옐", "옘", "옙", "옛", "옜", "오", "옥", "온", "올", "옭", "옮", "옰", "옳", "옴", "옵", "옷", "옹", "옻", "와", "왁", "완", "왈", "왐", "왑", "왓", "왔", "왕", "왜", "왝", "왠", "왬", "왯", "왱", "외", "왹", "왼", "욀", "욈", "욉", "욋", "욍", "요", "욕", "욘", "욜", "욤", "욥", "욧", "용", "우", "욱", "운", "울", "욹", "욺", "움", "웁", "웃", "웅", "워", "웍", "원", "월", "웜", "웝", "웠", "웡", "웨", "웩", "웬", "웰", "웸", "웹", "웽", "위", "윅", "윈", "윌", "윔", "윕", "윗", "윙", "유", "육", "윤", "율", "윰", "윱", "윳", "융", "윷", "으", "윽", "은", "을", "읊", "음", "읍", "읏", "응", "읒", "읓", "읔", "읕", "읖", "읗", "의", "읜", "읠", "읨", "읫", "이", "익", "인", "일", "읽", "읾", "잃", "임", "입", "잇", "있", "잉", "잊", "잎", "자", "작", "잔", "잖", "잗", "잘", "잚", "잠", "잡", "잣", "잤", "장", "잦", "재", "잭", "잰", "잴", "잼", "잽", "잿", "쟀", "쟁", "쟈", "쟉", "쟌", "쟎", "쟐", "쟘", "쟝", "쟤", "쟨", "쟬", "저", "적", "전", "절", "젊", "점", "접", "젓", "정", "젖", "제", "젝", "젠", "젤", "젬", "젭", "젯", "젱", "져", "젼", "졀", "졈", "졉", "졌", "졍", "졔", "조", "족", "존", "졸", "졺", "좀", "좁", "좃", "종", "좆", "좇", "좋", "좌", "좍", "좔", "좝", "좟", "좡", "좨", "좼", "좽", "죄", "죈", "죌", "죔", "죕", "죗", "죙", "죠", "죡", "죤", "죵", "주", "죽", "준", "줄", "줅", "줆", "줌", "줍", "줏", "중", "줘", "줬", "줴", "쥐", "쥑", "쥔", "쥘", "쥠", "쥡", "쥣", "쥬", "쥰", "쥴", "쥼", "즈", "즉", "즌", "즐", "즘", "즙", "즛", "증", "지", "직", "진", "짇", "질", "짊", "짐", "집", "짓", "징", "짖", "짙", "짚", "짜", "짝", "짠", "짢", "짤", "짧", "짬", "짭", "짯", "짰", "짱", "째", "짹", "짼", "쨀", "쨈", "쨉", "쨋", "쨌", "쨍", "쨔", "쨘", "쨩", "쩌", "쩍", "쩐", "쩔", "쩜", "쩝", "쩟", "쩠", "쩡", "쩨", "쩽", "쪄", "쪘", "쪼", "쪽", "쫀", "쫄", "쫌", "쫍", "쫏", "쫑", "쫓", "쫘", "쫙", "쫠", "쫬", "쫴", "쬈", "쬐", "쬔", "쬘", "쬠", "쬡", "쭁", "쭈", "쭉", "쭌", "쭐", "쭘", "쭙", "쭝", "쭤", "쭸", "쭹", "쮜", "쮸", "쯔", "쯤", "쯧", "쯩", "찌", "찍", "찐", "찔", "찜", "찝", "찡", "찢", "찧", "차", "착", "찬", "찮", "찰", "참", "찹", "찻", "찼", "창", "찾", "채", "책", "챈", "챌", "챔", "챕", "챗", "챘", "챙", "챠", "챤", "챦", "챨", "챰", "챵", "처", "척", "천", "철", "첨", "첩", "첫", "첬", "청", "체", "첵", "첸", "첼", "쳄", "쳅", "쳇", "쳉", "쳐", "쳔", "쳤", "쳬", "쳰", "촁", "초", "촉", "촌", "촐", "촘", "촙", "촛", "총", "촤", "촨", "촬", "촹", "최", "쵠", "쵤", "쵬", "쵭", "쵯", "쵱", "쵸", "춈", "추", "축", "춘", "출", "춤", "춥", "춧", "충", "춰", "췄", "췌", "췐", "취", "췬", "췰", "췸", "췹", "췻", "췽", "츄", "츈", "츌", "츔", "츙", "츠", "측", "츤", "츨", "츰", "츱", "츳", "층", "치", "칙", "친", "칟", "칠", "칡", "침", "칩", "칫", "칭", "카", "칵", "칸", "칼", "캄", "캅", "캇", "캉", "캐", "캑", "캔", "캘", "캠", "캡", "캣", "캤", "캥", "캬", "캭", "컁", "커", "컥", "컨", "컫", "컬", "컴", "컵", "컷", "컸", "컹", "케", "켁", "켄", "켈", "켐", "켑", "켓", "켕", "켜", "켠", "켤", "켬", "켭", "켯", "켰", "켱", "켸", "코", "콕", "콘", "콜", "콤", "콥", "콧", "콩", "콰", "콱", "콴", "콸", "쾀", "쾅", "쾌", "쾡", "쾨", "쾰", "쿄", "쿠", "쿡", "쿤", "쿨", "쿰", "쿱", "쿳", "쿵", "쿼", "퀀", "퀄", "퀑", "퀘", "퀭", "퀴", "퀵", "퀸", "퀼", "큄", "큅", "큇", "큉", "큐", "큔", "큘", "큠", "크", "큭", "큰", "클", "큼", "큽", "킁", "키", "킥", "킨", "킬", "킴", "킵", "킷", "킹", "타", "탁", "탄", "탈", "탉", "탐", "탑", "탓", "탔", "탕", "태", "택", "탠", "탤", "탬", "탭", "탯", "탰", "탱", "탸", "턍", "터", "턱", "턴", "털", "턺", "텀", "텁", "텃", "텄", "텅", "테", "텍", "텐", "텔", "템", "텝", "텟", "텡", "텨", "텬", "텼", "톄", "톈", "토", "톡", "톤", "톨", "톰", "톱", "톳", "통", "톺", "톼", "퇀", "퇘", "퇴", "퇸", "툇", "툉", "툐", "투", "툭", "툰", "툴", "툼", "툽", "툿", "퉁", "퉈", "퉜", "퉤", "튀", "튁", "튄", "튈", "튐", "튑", "튕", "튜", "튠", "튤", "튬", "튱", "트", "특", "튼", "튿", "틀", "틂", "틈", "틉", "틋", "틔", "틘", "틜", "틤", "틥", "티", "틱", "틴", "틸", "팀", "팁", "팃", "팅", "파", "팍", "팎", "판", "팔", "팖", "팜", "팝", "팟", "팠", "팡", "팥", "패", "팩", "팬", "팰", "팸", "팹", "팻", "팼", "팽", "퍄", "퍅", "퍼", "퍽", "펀", "펄", "펌", "펍", "펏", "펐", "펑", "페", "펙", "펜", "펠", "펨", "펩", "펫", "펭", "펴", "편", "펼", "폄", "폅", "폈", "평", "폐", "폘", "폡", "폣", "포", "폭", "폰", "폴", "폼", "폽", "폿", "퐁", "퐈", "퐝", "푀", "푄", "표", "푠", "푤", "푭", "푯", "푸", "푹", "푼", "푿", "풀", "풂", "품", "풉", "풋", "풍", "풔", "풩", "퓌", "퓐", "퓔", "퓜", "퓟", "퓨", "퓬", "퓰", "퓸", "퓻", "퓽", "프", "픈", "플", "픔", "픕", "픗", "피", "픽", "핀", "필", "핌", "핍", "핏", "핑", "하", "학", "한", "할", "핥", "함", "합", "핫", "항", "해", "핵", "핸", "핼", "햄", "햅", "햇", "했", "행", "햐", "향", "허", "헉", "헌", "헐", "헒", "험", "헙", "헛", "헝", "헤", "헥", "헨", "헬", "헴", "헵", "헷", "헹", "혀", "혁", "현", "혈", "혐", "협", "혓", "혔", "형", "혜", "혠", "혤", "혭", "호", "혹", "혼", "홀", "홅", "홈", "홉", "홋", "홍", "홑", "화", "확", "환", "활", "홧", "황", "홰", "홱", "홴", "횃", "횅", "회", "획", "횐", "횔", "횝", "횟", "횡", "효", "횬", "횰", "횹", "횻", "후", "훅", "훈", "훌", "훑", "훔", "훗", "훙", "훠", "훤", "훨", "훰", "훵", "훼", "훽", "휀", "휄", "휑", "휘", "휙", "휜", "휠", "휨", "휩", "휫", "휭", "휴", "휵", "휸", "휼", "흄", "흇", "흉", "흐", "흑", "흔", "흖", "흗", "흘", "흙", "흠", "흡", "흣", "흥", "흩", "희", "흰", "흴", "흼", "흽", "힁", "히", "힉", "힌", "힐", "힘", "힙", "힛", "힝"])
    two = random.choice(["가", "각", "간", "갇", "갈", "갉", "갊", "감", "갑", "값", "갓", "갔", "강", "갖", "갗", "같", "갚", "갛", "개", "객", "갠", "갤", "갬", "갭", "갯", "갰", "갱", "갸", "갹", "갼", "걀", "걋", "걍", "걔", "걘", "걜", "거", "걱", "건", "걷", "걸", "걺", "검", "겁", "것", "겄", "겅", "겆", "겉", "겊", "겋", "게", "겐", "겔", "겜", "겝", "겟", "겠", "겡", "겨", "격", "겪", "견", "겯", "결", "겸", "겹", "겻", "겼", "경", "곁", "계", "곈", "곌", "곕", "곗", "고", "곡", "곤", "곧", "골", "곪", "곬", "곯", "곰", "곱", "곳", "공", "곶", "과", "곽", "관", "괄", "괆", "괌", "괍", "괏", "광", "괘", "괜", "괠", "괩", "괬", "괭", "괴", "괵", "괸", "괼", "굄", "굅", "굇", "굉", "교", "굔", "굘", "굡", "굣", "구", "국", "군", "굳", "굴", "굵", "굶", "굻", "굼", "굽", "굿", "궁", "궂", "궈", "궉", "권", "궐", "궜", "궝", "궤", "궷", "귀", "귁", "귄", "귈", "귐", "귑", "귓", "규", "균", "귤", "그", "극", "근", "귿", "글", "긁", "금", "급", "긋", "긍", "긔", "기", "긱", "긴", "긷", "길", "긺", "김", "깁", "깃", "깅", "깆", "깊", "까", "깍", "깎", "깐", "깔", "깖", "깜", "깝", "깟", "깠", "깡", "깥", "깨", "깩", "깬", "깰", "깸", "깹", "깻", "깼", "깽", "꺄", "꺅", "꺌", "꺼", "꺽", "꺾", "껀", "껄", "껌", "껍", "껏", "껐", "껑", "께", "껙", "껜", "껨", "껫", "껭", "껴", "껸", "껼", "꼇", "꼈", "꼍", "꼐", "꼬", "꼭", "꼰", "꼲", "꼴", "꼼", "꼽", "꼿", "꽁", "꽂", "꽃", "꽈", "꽉", "꽐", "꽜", "꽝", "꽤", "꽥", "꽹", "꾀", "꾄", "꾈", "꾐", "꾑", "꾕", "꾜", "꾸", "꾹", "꾼", "꿀", "꿇", "꿈", "꿉", "꿋", "꿍", "꿎", "꿔", "꿜", "꿨", "꿩", "꿰", "꿱", "꿴", "꿸", "뀀", "뀁", "뀄", "뀌", "뀐", "뀔", "뀜", "뀝", "뀨", "끄", "끅", "끈", "끊", "끌", "끎", "끓", "끔", "끕", "끗", "끙", "끝", "끼", "끽", "낀", "낄", "낌", "낍", "낏", "낑", "나", "낙", "낚", "난", "낟", "날", "낡", "낢", "남", "납", "낫", "났", "낭", "낮", "낯", "낱", "낳", "내", "낵", "낸", "낼", "냄", "냅", "냇", "냈", "냉", "냐", "냑", "냔", "냘", "냠", "냥", "너", "넉", "넋", "넌", "널", "넒", "넓", "넘", "넙", "넛", "넜", "넝", "넣", "네", "넥", "넨", "넬", "넴", "넵", "넷", "넸", "넹", "녀", "녁", "년", "녈", "념", "녑", "녔", "녕", "녘", "녜", "녠", "노", "녹", "논", "놀", "놂", "놈", "놉", "놋", "농", "높", "놓", "놔", "놘", "놜", "놨", "뇌", "뇐", "뇔", "뇜", "뇝", "뇟", "뇨", "뇩", "뇬", "뇰", "뇹", "뇻", "뇽", "누", "눅", "눈", "눋", "눌", "눔", "눕", "눗", "눙", "눠", "눴", "눼", "뉘", "뉜", "뉠", "뉨", "뉩", "뉴", "뉵", "뉼", "늄", "늅", "늉", "느", "늑", "는", "늘", "늙", "늚", "늠", "늡", "늣", "능", "늦", "늪", "늬", "늰", "늴", "니", "닉", "닌", "닐", "닒", "님", "닙", "닛", "닝", "닢", "다", "닥", "닦", "단", "닫", "달", "닭", "닮", "닯", "닳", "담", "답", "닷", "닸", "당", "닺", "닻", "닿", "대", "댁", "댄", "댈", "댐", "댑", "댓", "댔", "댕", "댜", "더", "덕", "덖", "던", "덛", "덜", "덞", "덟", "덤", "덥", "덧", "덩", "덫", "덮", "데", "덱", "덴", "델", "뎀", "뎁", "뎃", "뎄", "뎅", "뎌", "뎐", "뎔", "뎠", "뎡", "뎨", "뎬", "도", "독", "돈", "돋", "돌", "돎", "돐", "돔", "돕", "돗", "동", "돛", "돝", "돠", "돤", "돨", "돼", "됐", "되", "된", "될", "됨", "됩", "됫", "됴", "두", "둑", "둔", "둘", "둠", "둡", "둣", "둥", "둬", "뒀", "뒈", "뒝", "뒤", "뒨", "뒬", "뒵", "뒷", "뒹", "듀", "듄", "듈", "듐", "듕", "드", "득", "든", "듣", "들", "듦", "듬", "듭", "듯", "등", "듸", "디", "딕", "딘", "딛", "딜", "딤", "딥", "딧", "딨", "딩", "딪", "따", "딱", "딴", "딸", "땀", "땁", "땃", "땄", "땅", "땋", "때", "땍", "땐", "땔", "땜", "땝", "땟", "땠", "땡", "떠", "떡", "떤", "떨", "떪", "떫", "떰", "떱", "떳", "떴", "떵", "떻", "떼", "떽", "뗀", "뗄", "뗌", "뗍", "뗏", "뗐", "뗑", "뗘", "뗬", "또", "똑", "똔", "똘", "똥", "똬", "똴", "뙈", "뙤", "뙨", "뚜", "뚝", "뚠", "뚤", "뚫", "뚬", "뚱", "뛔", "뛰", "뛴", "뛸", "뜀", "뜁", "뜅", "뜨", "뜩", "뜬", "뜯", "뜰", "뜸", "뜹", "뜻", "띄", "띈", "띌", "띔", "띕", "띠", "띤", "띨", "띰", "띱", "띳", "띵", "라", "락", "란", "랄", "람", "랍", "랏", "랐", "랑", "랒", "랖", "랗", "래", "랙", "랜", "랠", "램", "랩", "랫", "랬", "랭", "랴", "략", "랸", "럇", "량", "러", "럭", "런", "럴", "럼", "럽", "럿", "렀", "렁", "렇", "레", "렉", "렌", "렐", "렘", "렙", "렛", "렝", "려", "력", "련", "렬", "렴", "렵", "렷", "렸", "령", "례", "롄", "롑", "롓", "로", "록", "론", "롤", "롬", "롭", "롯", "롱", "롸", "롼", "뢍", "뢨", "뢰", "뢴", "뢸", "룀", "룁", "룃", "룅", "료", "룐", "룔", "룝", "룟", "룡", "루", "룩", "룬", "룰", "룸", "룹", "룻", "룽", "뤄", "뤘", "뤠", "뤼", "뤽", "륀", "륄", "륌", "륏", "륑", "류", "륙", "륜", "률", "륨", "륩", "륫", "륭", "르", "륵", "른", "를", "름", "릅", "릇", "릉", "릊", "릍", "릎", "리", "릭", "린", "릴", "림", "립", "릿", "링", "마", "막", "만", "많", "맏", "말", "맑", "맒", "맘", "맙", "맛", "망", "맞", "맡", "맣", "매", "맥", "맨", "맬", "맴", "맵", "맷", "맸", "맹", "맺", "먀", "먁", "먈", "먕", "머", "먹", "먼", "멀", "멂", "멈", "멉", "멋", "멍", "멎", "멓", "메", "멕", "멘", "멜", "멤", "멥", "멧", "멨", "멩", "며", "멱", "면", "멸", "몃", "몄", "명", "몇", "몌", "모", "목", "몫", "몬", "몰", "몲", "몸", "몹", "못", "몽", "뫄", "뫈", "뫘", "뫙", "뫼", "묀", "묄", "묍", "묏", "묑", "묘", "묜", "묠", "묩", "묫", "무", "묵", "묶", "문", "묻", "물", "묽", "묾", "뭄", "뭅", "뭇", "뭉", "뭍", "뭏", "뭐", "뭔", "뭘", "뭡", "뭣", "뭬", "뮈", "뮌", "뮐", "뮤", "뮨", "뮬", "뮴", "뮷", "므", "믄", "믈", "믐", "믓", "미", "믹", "민", "믿", "밀", "밂", "밈", "밉", "밋", "밌", "밍", "및", "밑", "바", "박", "밖", "밗", "반", "받", "발", "밝", "밞", "밟", "밤", "밥", "밧", "방", "밭", "배", "백", "밴", "밸", "뱀", "뱁", "뱃", "뱄", "뱅", "뱉", "뱌", "뱍", "뱐", "뱝", "버", "벅", "번", "벋", "벌", "벎", "범", "법", "벗", "벙", "벚", "베", "벡", "벤", "벧", "벨", "벰", "벱", "벳", "벴", "벵", "벼", "벽", "변", "별", "볍", "볏", "볐", "병", "볕", "볘", "볜", "보", "복", "볶", "본", "볼", "봄", "봅", "봇", "봉", "봐", "봔", "봤", "봬", "뵀", "뵈", "뵉", "뵌", "뵐", "뵘", "뵙", "뵤", "뵨", "부", "북", "분", "붇", "불", "붉", "붊", "붐", "붑", "붓", "붕", "붙", "붚", "붜", "붤", "붰", "붸", "뷔", "뷕", "뷘", "뷜", "뷩", "뷰", "뷴", "뷸", "븀", "븃", "븅", "브", "븍", "븐", "블", "븜", "븝", "븟", "비", "빅", "빈", "빌", "빎", "빔", "빕", "빗", "빙", "빚", "빛", "빠", "빡", "빤", "빨", "빪", "빰", "빱", "빳", "빴", "빵", "빻", "빼", "빽", "뺀", "뺄", "뺌", "뺍", "뺏", "뺐", "뺑", "뺘", "뺙", "뺨", "뻐", "뻑", "뻔", "뻗", "뻘", "뻠", "뻣", "뻤", "뻥", "뻬", "뼁", "뼈", "뼉", "뼘", "뼙", "뼛", "뼜", "뼝", "뽀", "뽁", "뽄", "뽈", "뽐", "뽑", "뽕", "뾔", "뾰", "뿅", "뿌", "뿍", "뿐", "뿔", "뿜", "뿟", "뿡", "쀼", "쁑", "쁘", "쁜", "쁠", "쁨", "쁩", "삐", "삑", "삔", "삘", "삠", "삡", "삣", "삥", "사", "삭", "삯", "산", "삳", "살", "삵", "삶", "삼", "삽", "삿", "샀", "상", "샅", "새", "색", "샌", "샐", "샘", "샙", "샛", "샜", "생", "샤", "샥", "샨", "샬", "샴", "샵", "샷", "샹", "섀", "섄", "섈", "섐", "섕", "서", "석", "섞", "섟", "선", "섣", "설", "섦", "섧", "섬", "섭", "섯", "섰", "성", "섶", "세", "섹", "센", "셀", "셈", "셉", "셋", "셌", "셍", "셔", "셕", "션", "셜", "셤", "셥", "셧", "셨", "셩", "셰", "셴", "셸", "솅", "소", "속", "솎", "손", "솔", "솖", "솜", "솝", "솟", "송", "솥", "솨", "솩", "솬", "솰", "솽", "쇄", "쇈", "쇌", "쇔", "쇗", "쇘", "쇠", "쇤", "쇨", "쇰", "쇱", "쇳", "쇼", "쇽", "숀", "숄", "숌", "숍", "숏", "숑", "수", "숙", "순", "숟", "술", "숨", "숩", "숫", "숭", "숯", "숱", "숲", "숴", "쉈", "쉐", "쉑", "쉔", "쉘", "쉠", "쉥", "쉬", "쉭", "쉰", "쉴", "쉼", "쉽", "쉿", "슁", "슈", "슉", "슐", "슘", "슛", "슝", "스", "슥", "슨", "슬", "슭", "슴", "습", "슷", "승", "시", "식", "신", "싣", "실", "싫", "심", "십", "싯", "싱", "싶", "싸", "싹", "싻", "싼", "쌀", "쌈", "쌉", "쌌", "쌍", "쌓", "쌔", "쌕", "쌘", "쌜", "쌤", "쌥", "쌨", "쌩", "썅", "써", "썩", "썬", "썰", "썲", "썸", "썹", "썼", "썽", "쎄", "쎈", "쎌", "쏀", "쏘", "쏙", "쏜", "쏟", "쏠", "쏢", "쏨", "쏩", "쏭", "쏴", "쏵", "쏸", "쐈", "쐐", "쐤", "쐬", "쐰", "쐴", "쐼", "쐽", "쑈", "쑤", "쑥", "쑨", "쑬", "쑴", "쑵", "쑹", "쒀", "쒔", "쒜", "쒸", "쒼", "쓩", "쓰", "쓱", "쓴", "쓸", "쓺", "쓿", "씀", "씁", "씌", "씐", "씔", "씜", "씨", "씩", "씬", "씰", "씸", "씹", "씻", "씽", "아", "악", "안", "앉", "않", "알", "앍", "앎", "앓", "암", "압", "앗", "았", "앙", "앝", "앞", "애", "액", "앤", "앨", "앰", "앱", "앳", "앴", "앵", "야", "약", "얀", "얄", "얇", "얌", "얍", "얏", "양", "얕", "얗", "얘", "얜", "얠", "얩", "어", "억", "언", "얹", "얻", "얼", "얽", "얾", "엄", "업", "없", "엇", "었", "엉", "엊", "엌", "엎", "에", "엑", "엔", "엘", "엠", "엡", "엣", "엥", "여", "역", "엮", "연", "열", "엶", "엷", "염", "엽", "엾", "엿", "였", "영", "옅", "옆", "옇", "예", "옌", "옐", "옘", "옙", "옛", "옜", "오", "옥", "온", "올", "옭", "옮", "옰", "옳", "옴", "옵", "옷", "옹", "옻", "와", "왁", "완", "왈", "왐", "왑", "왓", "왔", "왕", "왜", "왝", "왠", "왬", "왯", "왱", "외", "왹", "왼", "욀", "욈", "욉", "욋", "욍", "요", "욕", "욘", "욜", "욤", "욥", "욧", "용", "우", "욱", "운", "울", "욹", "욺", "움", "웁", "웃", "웅", "워", "웍", "원", "월", "웜", "웝", "웠", "웡", "웨", "웩", "웬", "웰", "웸", "웹", "웽", "위", "윅", "윈", "윌", "윔", "윕", "윗", "윙", "유", "육", "윤", "율", "윰", "윱", "윳", "융", "윷", "으", "윽", "은", "을", "읊", "음", "읍", "읏", "응", "읒", "읓", "읔", "읕", "읖", "읗", "의", "읜", "읠", "읨", "읫", "이", "익", "인", "일", "읽", "읾", "잃", "임", "입", "잇", "있", "잉", "잊", "잎", "자", "작", "잔", "잖", "잗", "잘", "잚", "잠", "잡", "잣", "잤", "장", "잦", "재", "잭", "잰", "잴", "잼", "잽", "잿", "쟀", "쟁", "쟈", "쟉", "쟌", "쟎", "쟐", "쟘", "쟝", "쟤", "쟨", "쟬", "저", "적", "전", "절", "젊", "점", "접", "젓", "정", "젖", "제", "젝", "젠", "젤", "젬", "젭", "젯", "젱", "져", "젼", "졀", "졈", "졉", "졌", "졍", "졔", "조", "족", "존", "졸", "졺", "좀", "좁", "좃", "종", "좆", "좇", "좋", "좌", "좍", "좔", "좝", "좟", "좡", "좨", "좼", "좽", "죄", "죈", "죌", "죔", "죕", "죗", "죙", "죠", "죡", "죤", "죵", "주", "죽", "준", "줄", "줅", "줆", "줌", "줍", "줏", "중", "줘", "줬", "줴", "쥐", "쥑", "쥔", "쥘", "쥠", "쥡", "쥣", "쥬", "쥰", "쥴", "쥼", "즈", "즉", "즌", "즐", "즘", "즙", "즛", "증", "지", "직", "진", "짇", "질", "짊", "짐", "집", "짓", "징", "짖", "짙", "짚", "짜", "짝", "짠", "짢", "짤", "짧", "짬", "짭", "짯", "짰", "짱", "째", "짹", "짼", "쨀", "쨈", "쨉", "쨋", "쨌", "쨍", "쨔", "쨘", "쨩", "쩌", "쩍", "쩐", "쩔", "쩜", "쩝", "쩟", "쩠", "쩡", "쩨", "쩽", "쪄", "쪘", "쪼", "쪽", "쫀", "쫄", "쫌", "쫍", "쫏", "쫑", "쫓", "쫘", "쫙", "쫠", "쫬", "쫴", "쬈", "쬐", "쬔", "쬘", "쬠", "쬡", "쭁", "쭈", "쭉", "쭌", "쭐", "쭘", "쭙", "쭝", "쭤", "쭸", "쭹", "쮜", "쮸", "쯔", "쯤", "쯧", "쯩", "찌", "찍", "찐", "찔", "찜", "찝", "찡", "찢", "찧", "차", "착", "찬", "찮", "찰", "참", "찹", "찻", "찼", "창", "찾", "채", "책", "챈", "챌", "챔", "챕", "챗", "챘", "챙", "챠", "챤", "챦", "챨", "챰", "챵", "처", "척", "천", "철", "첨", "첩", "첫", "첬", "청", "체", "첵", "첸", "첼", "쳄", "쳅", "쳇", "쳉", "쳐", "쳔", "쳤", "쳬", "쳰", "촁", "초", "촉", "촌", "촐", "촘", "촙", "촛", "총", "촤", "촨", "촬", "촹", "최", "쵠", "쵤", "쵬", "쵭", "쵯", "쵱", "쵸", "춈", "추", "축", "춘", "출", "춤", "춥", "춧", "충", "춰", "췄", "췌", "췐", "취", "췬", "췰", "췸", "췹", "췻", "췽", "츄", "츈", "츌", "츔", "츙", "츠", "측", "츤", "츨", "츰", "츱", "츳", "층", "치", "칙", "친", "칟", "칠", "칡", "침", "칩", "칫", "칭", "카", "칵", "칸", "칼", "캄", "캅", "캇", "캉", "캐", "캑", "캔", "캘", "캠", "캡", "캣", "캤", "캥", "캬", "캭", "컁", "커", "컥", "컨", "컫", "컬", "컴", "컵", "컷", "컸", "컹", "케", "켁", "켄", "켈", "켐", "켑", "켓", "켕", "켜", "켠", "켤", "켬", "켭", "켯", "켰", "켱", "켸", "코", "콕", "콘", "콜", "콤", "콥", "콧", "콩", "콰", "콱", "콴", "콸", "쾀", "쾅", "쾌", "쾡", "쾨", "쾰", "쿄", "쿠", "쿡", "쿤", "쿨", "쿰", "쿱", "쿳", "쿵", "쿼", "퀀", "퀄", "퀑", "퀘", "퀭", "퀴", "퀵", "퀸", "퀼", "큄", "큅", "큇", "큉", "큐", "큔", "큘", "큠", "크", "큭", "큰", "클", "큼", "큽", "킁", "키", "킥", "킨", "킬", "킴", "킵", "킷", "킹", "타", "탁", "탄", "탈", "탉", "탐", "탑", "탓", "탔", "탕", "태", "택", "탠", "탤", "탬", "탭", "탯", "탰", "탱", "탸", "턍", "터", "턱", "턴", "털", "턺", "텀", "텁", "텃", "텄", "텅", "테", "텍", "텐", "텔", "템", "텝", "텟", "텡", "텨", "텬", "텼", "톄", "톈", "토", "톡", "톤", "톨", "톰", "톱", "톳", "통", "톺", "톼", "퇀", "퇘", "퇴", "퇸", "툇", "툉", "툐", "투", "툭", "툰", "툴", "툼", "툽", "툿", "퉁", "퉈", "퉜", "퉤", "튀", "튁", "튄", "튈", "튐", "튑", "튕", "튜", "튠", "튤", "튬", "튱", "트", "특", "튼", "튿", "틀", "틂", "틈", "틉", "틋", "틔", "틘", "틜", "틤", "틥", "티", "틱", "틴", "틸", "팀", "팁", "팃", "팅", "파", "팍", "팎", "판", "팔", "팖", "팜", "팝", "팟", "팠", "팡", "팥", "패", "팩", "팬", "팰", "팸", "팹", "팻", "팼", "팽", "퍄", "퍅", "퍼", "퍽", "펀", "펄", "펌", "펍", "펏", "펐", "펑", "페", "펙", "펜", "펠", "펨", "펩", "펫", "펭", "펴", "편", "펼", "폄", "폅", "폈", "평", "폐", "폘", "폡", "폣", "포", "폭", "폰", "폴", "폼", "폽", "폿", "퐁", "퐈", "퐝", "푀", "푄", "표", "푠", "푤", "푭", "푯", "푸", "푹", "푼", "푿", "풀", "풂", "품", "풉", "풋", "풍", "풔", "풩", "퓌", "퓐", "퓔", "퓜", "퓟", "퓨", "퓬", "퓰", "퓸", "퓻", "퓽", "프", "픈", "플", "픔", "픕", "픗", "피", "픽", "핀", "필", "핌", "핍", "핏", "핑", "하", "학", "한", "할", "핥", "함", "합", "핫", "항", "해", "핵", "핸", "핼", "햄", "햅", "햇", "했", "행", "햐", "향", "허", "헉", "헌", "헐", "헒", "험", "헙", "헛", "헝", "헤", "헥", "헨", "헬", "헴", "헵", "헷", "헹", "혀", "혁", "현", "혈", "혐", "협", "혓", "혔", "형", "혜", "혠", "혤", "혭", "호", "혹", "혼", "홀", "홅", "홈", "홉", "홋", "홍", "홑", "화", "확", "환", "활", "홧", "황", "홰", "홱", "홴", "횃", "횅", "회", "획", "횐", "횔", "횝", "횟", "횡", "효", "횬", "횰", "횹", "횻", "후", "훅", "훈", "훌", "훑", "훔", "훗", "훙", "훠", "훤", "훨", "훰", "훵", "훼", "훽", "휀", "휄", "휑", "휘", "휙", "휜", "휠", "휨", "휩", "휫", "휭", "휴", "휵", "휸", "휼", "흄", "흇", "흉", "흐", "흑", "흔", "흖", "흗", "흘", "흙", "흠", "흡", "흣", "흥", "흩", "희", "흰", "흴", "흼", "흽", "힁", "히", "힉", "힌", "힐", "힘", "힙", "힛", "힝"])
    res = f"{one}{two}"
    return res

DATA_FILE = "user_data.json"

def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

user_data = load_data()
active_sessions = {}

@bot.slash_command(name="회원가입", description="나다돈 시스템에 회원가입합니다.")
async def register(interaction: Interaction):
    user_id = str(interaction.user.id)
    if user_id in user_data:
        embed = Embed(title="❌ 회원가입 실패", description="이미 가입된 회원입니다!", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
    else:
        user_data[user_id] = {
            "balance": 20000,
            "last_check_in": None
        }
        save_data(user_data)
        embed = Embed(
            title="✅ 회원가입 성공",
            description="회원가입이 완료되었습니다! 초기 보너스 **2만 나다돈**을 받았습니다.",
            color=0x00FF00
        )
        await interaction.response.send_message(embed=embed)

@bot.slash_command(name="로그인", description="나다돈 시스템에 로그인합니다.")
async def login(interaction: Interaction):
    user_id = str(interaction.user.id)
    if user_id not in user_data:
        embed = Embed(title="❌ 로그인 실패", description="가입되지 않은 사용자입니다. `/회원가입`을 먼저 해주세요.", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
    elif user_id in active_sessions:
        embed = Embed(title="❌ 로그인 실패", description="이미 로그인 상태입니다!", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
    else:
        active_sessions[user_id] = datetime.now()
        embed = Embed(title="✅ 로그인 성공", description="로그인되었습니다.", color=0x00FF00)
        await interaction.response.send_message(embed=embed)

@bot.slash_command(name="로그아웃", description="나다돈 시스템에서 로그아웃합니다.")
async def logout(interaction: Interaction):
    user_id = str(interaction.user.id)
    if user_id not in active_sessions:
        embed = Embed(title="❌ 로그아웃 실패", description="로그인 상태가 아닙니다.", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
    else:
        del active_sessions[user_id]
        embed = Embed(title="✅ 로그아웃 성공", description="로그아웃되었습니다.", color=0x00FF00)
        await interaction.response.send_message(embed=embed)

@bot.slash_command(name="탈퇴", description="나다돈 시스템에서 탈퇴합니다.")
async def unregister(interaction: Interaction):
    user_id = str(interaction.user.id)
    if user_id in user_data:
        del user_data[user_id]
        save_data(user_data)
        if user_id in active_sessions:
            del active_sessions[user_id]
        embed = Embed(title="✅ 탈퇴 성공", description="계정이 탈퇴되었습니다.", color=0x00FF00)
        await interaction.response.send_message(embed=embed)
    else:
        embed = Embed(title="❌ 탈퇴 실패", description="가입되지 않은 사용자입니다.", color=0xFF0000)
        await interaction.response.send_message(embed=embed)

@bot.slash_command(name="나다돈유저정보", description="로그인한 유저의 정보를 확인합니다.")
async def userinfo(interaction: Interaction):
    user_id = str(interaction.user.id)
    if user_id in user_data:
        info = user_data[user_id]
        embed = Embed(title=f"💳 {interaction.user.display_name}님의 유저 정보", color=0x3498DB)
        embed.add_field(name="잔액", value=f"{info['balance']} 나다돈", inline=False)
        await interaction.response.send_message(embed=embed)
    else:
        embed = Embed(title="❌ 유저 정보 조회 실패", description="가입되지 않은 사용자입니다.", color=0xFF0000)
        await interaction.response.send_message(embed=embed)

@bot.slash_command(name="출석", description="출석 보상을 받습니다.")
async def check_in(interaction: Interaction):
    user_id = str(interaction.user.id)
    if user_id not in user_data:
        embed = Embed(title="❌ 출석 실패", description="가입되지 않은 사용자입니다.", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
        return

    now = datetime.now()
    last_check_in = user_data[user_id].get("last_check_in")
    if last_check_in:
        last_check_in = datetime.fromisoformat(last_check_in)
        if now - last_check_in < timedelta(days=1):
            embed = Embed(
                title="❌ 출석 실패",
                description="출석 보상은 하루에 한 번만 받을 수 있습니다!",
                color=0xFF0000
            )
            await interaction.response.send_message(embed=embed)
            return

    user_data[user_id]["balance"] += 50000
    user_data[user_id]["last_check_in"] = now.isoformat()
    save_data(user_data)
    embed = Embed(
        title="✅ 출석 성공",
        description="출석 보상으로 **5만 나다돈**을 받았습니다!",
        color=0x00FF00
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="도박", description="나다돈으로 도박을 합니다.")
async def gamble(interaction: Interaction, 낼돈: int=nextcord.SlashOption(name="돈",description="도박을 하기위한 돈을 내세요",required=True)):
    amount=낼돈
    user_id = str(interaction.user.id)
    if user_id not in user_data:
        embed = Embed(title="❌ 도박 실패", description="가입되지 않은 사용자입니다.", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
        return

    if amount <= 0 or user_data[user_id]["balance"] < amount:
        embed = Embed(title="❌ 도박 실패", description="올바른 금액을 입력하세요. (잔액 부족)", color=0xFF0000)
        await interaction.response.send_message(embed=embed)
        return

    result = random.choices(["2배", "5배", "-20배"], weights=[20, 10, 70])[0]
    if result == "2배":
        user_data[user_id]["balance"] += amount * 2
    elif result == "5배":
        user_data[user_id]["balance"] += amount * 5
    else:
        user_data[user_id]["balance"]-=amount*20

    save_data(user_data)
    embed = Embed(
        title="🎲 도박 결과",
        description=f"결과: **{result}**\n현재 잔액: {user_data[user_id]['balance']} 나다돈",
        color=0xF1C40F if result != "-20배" else 0xE74C3C
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="랭킹",description="나다돈 랭킹을 확인합니다.")
async def ranking(interaction: Interaction):
    if not user_data:
        embed = Embed(
            title="❌ 랭킹 확인 실패",
            description="아직 등록된 사용자가 없습니다. `/회원가입`으로 가입하세요!",
            color=0xFF0000
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        return

    sorted_users = sorted(
        user_data.items(),
        key=lambda x: x[1]["balance"],
        reverse=True
    )

    embed = Embed(title="💰 나다돈 랭킹", color=0x3498DB)
    for rank, (user_id, data) in enumerate(sorted_users[:10], start=1):  # 상위 10명
        user_name = await bot.fetch_user(int(user_id))  # 사용자 이름 가져오기
        embed.add_field(
            name=f"#{rank} {user_name.display_name}",
            value=f"잔액: {data['balance']} 나다돈",
            inline=False
        )

    await interaction.response.send_message(embed=embed, ephemeral=False)

import asyncio

WORD_LIST_FILE = "word_list.json"    

with open(WORD_LIST_FILE, 'r', encoding='utf-8') as file:
    word_dict = json.load(file)

@bot.slash_command(name="끝말잇기", description="끝말잇기를 시작합니다.")
async def word_chain(ctx: Interaction):
    await ctx.send("끝말잇기를 시작합니다! 첫 단어를 입력해주세요.")

    def check(message):
        return message.author == ctx.user and message.channel == ctx.channel

    used_words = set()
    warning_count = 0
    current_word = random.choice(random.choice(list(word_dict.values())))  # 첫 단어 선택

    embed = nextcord.Embed(
        title="끝말잇기 시작",
        description=f"첫 단어: **{current_word}**",
        color=nextcord.Color.blue(),
    )
    await ctx.send(embed=embed)

    while True:
        try:
            user_input = await bot.wait_for("message", timeout=30.0, check=check)
            user_word = user_input.content.strip()
        except asyncio.TimeoutError:
            embed = nextcord.Embed(
                title="끝말잇기 종료",
                description="⏰ 시간이 초과되어 게임이 종료되었습니다!",
                color=nextcord.Color.red(),
            )
            await ctx.send(embed=embed)
            break

        if not user_word:
            warning_count = await handle_warning(ctx, warning_count, "입력이 비어 있습니다.")
            if warning_count >= 3:
                break
            continue

        if user_word in used_words:
            warning_count = await handle_warning(ctx, warning_count, "이미 사용한 단어입니다.")
            if warning_count >= 3:
                break
            continue

        if not user_word.startswith(current_word[-1]):
            warning_count = await handle_warning(ctx, warning_count, "끝말잇기 규칙에 어긋나는 단어입니다.")
            if warning_count >= 3:
                break
            continue

        first_char = user_word[0]
        if first_char not in word_dict or user_word not in word_dict[first_char]:
            warning_count = await handle_warning(ctx, warning_count, "사전에 없는 단어입니다.")
            if warning_count >= 3:
                break
            continue

        used_words.add(user_word)
        bot_options = word_dict.get(user_word[-1], [])
        if not bot_options:
            embed = nextcord.Embed(
                title="끝말잇기 종료",
                description="봇이 사용할 단어가 없어 게임이 종료되었습니다!",
                color=nextcord.Color.green(),
            )
            await ctx.send(embed=embed)
            break

        bot_word = random.choice(bot_options)
        used_words.add(bot_word)
        embed = nextcord.Embed(
            title="봇의 차례",
            description=f"봇이 말한 단어: **{bot_word}**",
            color=nextcord.Color.blue(),
        )
        await ctx.send(embed=embed)

        current_word = bot_word
        warning_count = 0

    embed = nextcord.Embed(
        title="끝말잇기 종료",
        description=f"사용된 단어 목록: {', '.join(used_words)}",
        color=nextcord.Color.green(),
    )
    await ctx.send(embed=embed)


async def handle_warning(ctx, warning_count, reason):
    """
    경고를 처리하고 경고 카운트를 증가시킵니다.
    """
    warning_count += 1
    embed = nextcord.Embed(
        title="⚠ 경고",
        description=f"{reason} (경고 {warning_count}/3)",
        color=nextcord.Color.orange(),
    )
    await ctx.send(embed=embed)

    if warning_count >= 3:
        embed = nextcord.Embed(
            title="끝말잇기 종료",
            description="경고가 3회 초과되어 게임이 종료되었습니다!",
            color=nextcord.Color.red(),
        )
        await ctx.send(embed=embed)

    return warning_count


@bot.slash_command(name="단어",description="끝말잇기 단어 검색을 합니다")
async def words(ctx : Interaction , 검색어 : str = nextcord.SlashOption(description="검색어를 적어주세요",required=True)):
    global word_dict

    검색어 = 검색어.strip()

    if not 검색어:
        await ctx.send('검색어를 입력해주세요.')
        return

    검색결과 = []

    for word_group, words in word_dict.items():
        for word in words:
            if 검색어 in word:
                검색결과.append(word)

    if 검색결과:
        검색결과_str = '\n'.join(검색결과)
        embed = nextcord.Embed(title='검색 결과', description=f'"{검색어}"를 포함하는 단어 목록: \n{검색결과_str}', color=nextcord.Color.green())
        await ctx.send(embed=embed)
    else:
        await ctx.send(f'"{검색어}"를 포함하는 단어가 없습니다.')

@bot.slash_command(name="끝말잇기-긴단어",description="끝말잇기 긴단어를 검색합니다")
async def search_long_words(ctx, 시작단어: str=nextcord.SlashOption(description="긴단어의 시작 글자를 적어주세요"),required=True):
    global word_dict

    시작단어 = 시작단어.strip()

    if not 시작단어:
        await ctx.send('검색할 시작 단어를 입력해주세요.')
        return

    긴단어목록 = []

    for word_group, words in word_dict.items():
        for word in words:
            if word.startswith(시작단어) and len(word) > len(시작단어):
                긴단어목록.append(word)

    if 긴단어목록:
        긴단어목록.sort(key=len, reverse=True)

        top_10 = 긴단어목록[:10]

        긴단어목록_str = '\n'.join(top_10)
        embed = nextcord.Embed(title='긴 단어 검색 결과', description=f'"{시작단어}"로 시작하는 긴 단어 TOP 10: \n{긴단어목록_str}', color=nextcord.Color.green())
        await ctx.send(embed=embed)
    else:
        await ctx.send(f'"{시작단어}"로 시작하는 긴 단어가 없습니다.')


@bot.slash_command(name="로꾸꺼", description="문자열을 거꾸로 출력합니다.")
async def reverse_text(interaction: Interaction, text: str = SlashOption(name="문자열",description="문자열을 입력해주세요.")):
    reversed_text = text[::-1]
    embed = Embed(
        title="🔄 문자열 거꾸로",
        description=f"**원문:** {text}\n**결과:** {reversed_text}",
        color=0x00FFFF
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(
    name="서버정보",
    description="서버 정보를 표시합니다."
)
async def server_info(ctx:nextcord.Interaction):
    guild = ctx.guild
    icon_url = guild.icon.url if guild.icon else None 

    embed = nextcord.Embed(title=f"{guild.name} 서버 정보입니다", color=0x62c1cc)
    embed.add_field(name="📜 이름", value=f"{guild.name}", inline=True)
    embed.add_field(name="🧭 잠수 시간", value=f"{guild.afk_timeout}", inline=True)
    embed.add_field(name="👱‍♂️ 서버 주인", value=f"{guild.owner}", inline=True)
    embed.add_field(name="😃 서버 멤버수", value=f"{guild.member_count}", inline=True)

    embed.add_field(name="⌛ 서버 생성일", value=guild.created_at.strftime("20%y년 %m월 %d일"), inline=True)
    embed.add_field(name="💬 서버 채팅채널 ", value=f"{len(guild.text_channels)}개", inline=True)
    embed.add_field(name="🔊 서버음성채널 ", value=f"{len(guild.voice_channels)}개", inline=True)

    embed.add_field(name="🖐 시스탬 환영메세지", value=f"{guild.system_channel.name}", inline=True)
    embed.add_field(name="🟢 서버 인증단계", value=guild.verification_level, inline=True)
    embed.add_field(name="💌 서버 부스터 레벨", value=guild.premium_subscription_count, inline=True)

    if icon_url:
        embed.set_thumbnail(url=icon_url)

    await ctx.send(embed=embed)
texts = [
    "단어를 순서(어순)에 맞게 배열하여 생각이나 감정을 표현하는 말이나 글 따위를 일컫는다. 고유어로는 '월'이라고 한다. 영어로는 sentence. 기본적으로 주어 + 서술어의 구조를 갖추며, 마침표(.?!)로 구분된다."
    ,"외국어를 듣다보면 잘 안들리는 부분, 전혀 안들리는 부분이 있다. 이것은 자연스러운 현상이다."
    ,"영어는 문장을 단문(simple), 중문(compound), 복문(complex)으로 분류한다."
    ,"어식 분류를 적용할 때 단문은 홑문장, 중문은 겹문장 중 이어진 문장, 복문은 겹문장 중 안은 문장에 대응한다."
    ,"가갸 뒤 자도 모른다."
    ,"가까운 제 눈썹 못 본다"
    ,"값도 모르고 싸다 한다"
]

@bot.slash_command(name="타자게임", description="타자 속도를 테스트하는 게임입니다.")
async def typing_game(ctx: Interaction):
    selected_text = random.choice(texts)
    await ctx.send("타자 게임을 시작합니다! 아래 문장을 정확히 타이핑하세요.\n\n" + selected_text)
    
    start_time = time.time()

    def check(msg):
        return msg.author == ctx.user and msg.channel == ctx.channel

    try:
        user_message = await bot.wait_for('message', check=check, timeout=30.0)
        
        end_time = time.time()
        
        typing_duration = end_time - start_time
        word_count = len(user_message.content.split())
        
        if user_message.content == selected_text:
            await ctx.send(f"정확히 타이핑했습니다! 소요 시간: {typing_duration:.2f}초, 타자 속도: {word_count / typing_duration:.2f} words/second")
        else:
            await ctx.send(f"타이핑이 정확하지 않았습니다. 다시 시도해 보세요! 소요 시간: {typing_duration:.2f}초.")
    
    except Exception as e:
        await ctx.send(f"시간 초과! 다시 시도해 보세요. 에러: {str(e)}")

attempts=0
number_to_guess=random.randint(1,1000)
@bot.slash_command(name="업다운",description="업다운을 합니다")
async def updown(ctx:Interaction):
        global attempts,number_to_guess
        embed = nextcord.Embed(
            title="업다운 미니게임",
            description="1부터 1000 사이의 숫자를 맞춰보세요!",
            color=nextcord.Color.blue()
        )
        await ctx.send(embed=embed)

        def check(message):
            return message.author == ctx.user and message.channel == ctx.channel

        while True:
            try:
                user_guess = await bot.wait_for("message", timeout=30, check=check)
                guess = int(user_guess.content)

                if guess == number_to_guess:
                    embed = nextcord.Embed(
                        title="축하합니다!",
                        description=f"{guess}를 맞추셨습니다. 시도 횟수: {attempts}",
                        color=nextcord.Color.green()
                    )
                    await ctx.send(embed=embed)
                    break
                elif guess < number_to_guess:
                    embed = nextcord.Embed(
                        title="Up!",
                        description="더 큰 숫자를 입력하세요.",
                        color=nextcord.Color.orange()
                    )
                    await ctx.send(embed=embed)
                else:
                    embed = nextcord.Embed(
                        title="Down!",
                        description="더 작은 숫자를 입력하세요.",
                        color=nextcord.Color.orange()
                    )
                    await ctx.send(embed=embed)

                attempts += 1

            except ValueError:
                embed = nextcord.Embed(
                    title="오류",
                    description="올바른 숫자를 입력하세요.",
                    color=nextcord.Color.red()
                )
                await ctx.send(embed=embed)

@bot.slash_command(name="녜힁",description="이상한 글자 만들기")
async def nyewhing(ctx:Interaction):
    await ctx.send(nyehwing())

@bot.slash_command(name="메세지-보내기",description="채널에 메세지를 보내요")
async def slash_messagechannel(ctx : nextcord.Interaction, channel : nextcord.TextChannel = nextcord.SlashOption(name="채널",description="메세지를 보낼 채널을 선택해주세요!"),message:str=nextcord.SlashOption(name="내용",description="메세지 내용을 골라주세요")):
        await channel.send(message)
        await ctx.send("보내기 완료")

@bot.slash_command(name="입장순위",description="서버의 입장 순위를 알려줍니다")
async def slash_join_rank(ctx:nextcord.Interaction):
        members = sorted(ctx.guild.members, key=lambda m: m.joined_at)

        embed = nextcord.Embed(
            title="서버 입장 순위",
            color=0x3498DB,
        )

        for i, member in enumerate(members):
            embed.add_field(
                name=f"{i + 1}. {member.display_name}",
                value=f"ID: {member.id}\n가입일: {member.joined_at.strftime('%Y-%m-%d %H:%M:%S')}",
                inline=False,
            )

        await ctx.send(embed=embed)

@bot.slash_command(name="오래된계정순위",description="서버의 오래된 계정 순위를 알려줍니다")
async def slash_join_rank(ctx:nextcord.Interaction):
        members = sorted(ctx.guild.members, key=lambda m: m.created_at.strftime('%Y-%m-%d %H:%M:%S'))

        embed = nextcord.Embed(
            title="서버 멤버 디스코드 오래된계정 순위",
            color=0x3498DB,
        )

        for i, member in enumerate(members):
            embed.add_field(
                name=f"{i + 1}. {member.display_name}",
                value=f"계정 가입일 : {member.created_at.strftime('%Y-%m-%d %H:%M:%S')}",
                inline=False,
            )

        await ctx.send(embed=embed)

@bot.slash_command(name="덧셈", description="두 숫자를 더합니다.")
async def addition(
    interaction: Interaction, 
    a: float = SlashOption(name="숫자1", description="첫 번째 숫자", required=True),
    b: float = SlashOption(name="숫자2", description="두 번째 숫자", required=True)
):
    result = a + b
    embed = Embed(
        title="덧셈 결과",
        description=f"{a} + {b} = {result}",
        color=0x00FF00
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="뺄셈", description="두 숫자를 뺍니다.")
async def subtraction(
    interaction: Interaction,
    a: float = SlashOption(name="숫자1", description="첫 번째 숫자", required=True),
    b: float = SlashOption(name="숫자2", description="두 번째 숫자", required=True)
):
    result = a - b
    embed = Embed(
        title="뺄셈 결과",
        description=f"{a} - {b} = {result}",
        color=0xFF5733
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="곱셈", description="두 숫자를 곱합니다.")
async def multiplication(
    interaction: Interaction,
    a: float = SlashOption(name="숫자1", description="첫 번째 숫자", required=True),
    b: float = SlashOption(name="숫자2", description="두 번째 숫자", required=True)
):
    result = a * b
    embed = Embed(
        title="곱셈 결과",
        description=f"{a} × {b} = {result}",
        color=0x3498DB
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="제곱근", description="숫자의 제곱근을 계산합니다.")
async def sqrt(
    interaction: Interaction,
    a: float = SlashOption(
        name="숫자", 
        description="제곱근을 계산할 숫자", 
        required=True, 
        min_value=0
    )
):
    result = math.sqrt(a)
    embed = Embed(
        title="제곱근 결과",
        description=f"√{a} = {result}",
        color=0x8E44AD
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="로그", description="밑이 10인 로그를 계산합니다.")
async def log10(
    interaction: Interaction,
    a: float = SlashOption(
        name="숫자",
        description="로그를 계산할 숫자 (양수만 가능)",
        required=True,
        min_value=0.0001
    )
):
    result = math.log10(a)
    embed = Embed(
        title="로그 계산 결과",
        description=f"log₁₀({a}) = {result}",
        color=0xF1C40F
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="삼각함수", description="삼각함수 값을 계산합니다.")
async def trig(
    interaction: Interaction,
    함수: str = SlashOption(
        name="함수", 
        description="사인, 코사인, 탄젠트 중 선택",
        choices={"사인": "sin", "코사인": "cos", "탄젠트": "tan"},
        required=True
    ),
    각도: float = SlashOption(
        name="각도", 
        description="각도 (0~360도)", 
        required=True, 
        min_value=0, 
        max_value=360
    )
):
    radians = math.radians(각도)
    if 함수 == "sin":
        result = math.sin(radians)
    elif 함수 == "cos":
        result = math.cos(radians)
    elif 함수 == "tan":
        if 각도 % 90 == 0 and (각도 // 90) % 2 == 1:  
            await interaction.response.send_message("이 각도에서 탄젠트는 정의되지 않습니다!")
            return
        result = math.tan(radians)

    embed = Embed(
        title=f"{함수.upper()} 계산 결과",
        description=f"{함수}({각도}°) = {result}",
        color=0x2ECC71
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="원넓이", description="원의 넓이를 계산합니다.")
async def circle_area(
    interaction: Interaction,
    반지름: float = SlashOption(
        name="반지름", 
        description="원의 반지름", 
        required=True, 
        min_value=0
    )
):
    result = math.pi * (반지름 ** 2)
    embed = Embed(
        title="원의 넓이 계산 결과",
        description=f"반지름 {반지름}의 원 넓이 = {result:.2f}",
        color=0x1ABC9C
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="원둘레", description="원의 둘레를 계산합니다.")
async def circle_circumference(
    interaction: Interaction,
    반지름: float = SlashOption(
        name="반지름", 
        description="원의 반지름", 
        required=True, 
        min_value=0
    )
):
    result = 2 * math.pi * 반지름
    embed = Embed(
        title="원의 둘레 계산 결과",
        description=f"반지름 {반지름}의 원 둘레 = {result:.2f}",
        color=0xE67E22
    )
    await interaction.response.send_message(embed=embed)

import random

@bot.slash_command(name="가위바위보", description="봇과 가위바위보 게임을 합니다.")
async def rps(
    interaction: Interaction,
    선택: str = SlashOption(
        name="선택",
        description="가위, 바위, 보 중 하나를 선택하세요.",
        choices={"가위": "가위", "바위": "바위", "보": "보"},
        required=True
    )
):
    bot_choice = random.choice(["가위", "바위", "보"])
    result = ""
    if 선택 == bot_choice:
        result = "무승부!"
    elif (선택 == "가위" and bot_choice == "보") or \
         (선택 == "바위" and bot_choice == "가위") or \
         (선택 == "보" and bot_choice == "바위"):
        result = "🎉 당신이 이겼습니다!"
    else:
        result = "😭 봇이 이겼습니다!"

    embed = Embed(
        title="가위바위보 결과",
        description=f"당신: {선택} | 봇: {bot_choice}\n\n결과: {result}",
        color=0x1F8B4C
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="주사위", description="1부터 원하는 숫자까지 랜덤 숫자를 뽑습니다.")
async def roll_dice(
    interaction: Interaction,
    최대값: int = SlashOption(
        name="최대값",
        description="주사위의 최대 숫자를 입력하세요.",
        required=True,
        min_value=1
    )
):
    result = random.randint(1, 최대값)
    embed = Embed(
        title="주사위 결과",
        description=f"1부터 {최대값}까지의 숫자 중: 🎲 {result}",
        color=0x3498DB
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="최대공약수", description="두 숫자의 최대공약수를 계산합니다.")
async def gcd(
    interaction: Interaction,
    a: int = SlashOption(name="숫자1", description="첫 번째 숫자", required=True),
    b: int = SlashOption(name="숫자2", description="두 번째 숫자", required=True)
):
    result = math.gcd(a, b)
    embed = Embed(
        title="최대공약수 결과",
        description=f"{a}와 {b}의 최대공약수는 {result}입니다.",
        color=0x9B59B6
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="소수판별", description="입력된 숫자가 소수인지 확인합니다.")
async def is_prime(
    interaction: Interaction,
    숫자: int = SlashOption(
        name="숫자",
        description="소수인지 확인할 숫자",
        required=True,
        min_value=2
    )
):
    if all(숫자 % i != 0 for i in range(2, int(math.sqrt(숫자)) + 1)):
        result = "소수입니다."
    else:
        result = "소수가 아닙니다."
    
    embed = Embed(
        title="소수 판별 결과",
        description=f"{숫자}는 {result}",
        color=0xE74C3C
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="피보나치", description="n번째 피보나치 수를 계산합니다.")
async def fibonacci(
    interaction: Interaction,
    n: int = SlashOption(
        name="n",
        description="계산할 피보나치 수열의 항 (1 이상의 정수)",
        required=True,
        min_value=1,
        max_value=1000
    )
):
    dp=[0,1]*(n+1)
    for i in range(2,n+1):
        dp[i]=dp[i-1]+dp[i-2]
    
    embed = Embed(
        title="피보나치 결과",
        description=f"{n}번째 피보나치 수는 {dp[n]}입니다.",
        color=0x2980B9
    )
    await interaction.response.send_message(embed=embed)

from datetime import datetime
from pytz import timezone

@bot.slash_command(name="현재시간", description="현재 시간을 표시합니다.")
async def current_time(interaction: Interaction):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    embed = Embed(
        title="현재 시간",
        description=f"지금은 {now}입니다.",
        color=0x2ECC71
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="남은시간", description="특정 날짜까지 남은 시간을 계산합니다.")
async def time_until(
    interaction: Interaction,
    날짜: str = SlashOption(
        name="날짜",
        description="계산할 날짜를 YYYY-MM-DD 형식으로 입력하세요.",
        required=True
    )
):
    try:
        target_date = datetime.strptime(날짜, "%Y-%m-%d")
        now = datetime.now()
        delta = target_date - now
        if delta.days < 0:
            result = "해당 날짜는 이미 지났습니다!"
        else:
            result = f"{delta.days}일 {delta.seconds // 3600}시간 남았습니다."
        embed = Embed(
            title="남은 시간",
            description=f"{날짜}까지 남은 시간: {result}",
            color=0xE67E22
        )
        await interaction.response.send_message(embed=embed)
    except ValueError:
        await interaction.response.send_message("날짜 형식이 잘못되었습니다. YYYY-MM-DD 형식으로 입력해주세요.")

@bot.slash_command(name="경과시간", description="특정 날짜로부터 경과된 시간을 계산합니다.")
async def time_elapsed(
    interaction: Interaction,
    날짜: str = SlashOption(
        name="날짜",
        description="계산할 날짜를 YYYY-MM-DD 형식으로 입력하세요.",
        required=True
    )
):
    try:
        target_date = datetime.strptime(날짜, "%Y-%m-%d")
        now = datetime.now()
        delta = now - target_date
        if delta.days < 0:
            result = "해당 날짜는 미래의 날짜입니다!"
        else:
            result = f"{delta.days}일 {delta.seconds // 3600}시간 경과했습니다."
        embed = Embed(
            title="경과 시간",
            description=f"{날짜}부터 경과된 시간: {result}",
            color=0x9B59B6
        )
        await interaction.response.send_message(embed=embed)
    except ValueError:
        await interaction.response.send_message("날짜 형식이 잘못되었습니다. YYYY-MM-DD 형식으로 입력해주세요.")

import asyncio

@bot.slash_command(name="타이머", description="설정한 시간(초) 후 알림을 보냅니다.")
async def timer(
    interaction: Interaction,
    시간: int = SlashOption(
        name="시간",
        description="타이머 시간(초)을 입력하세요.",
        required=True,
        min_value=1
    )
):
    await interaction.response.send_message(f"⏳ {시간}초 타이머를 시작합니다!")
    await asyncio.sleep(시간)
    await interaction.followup.send(f"⏰ {interaction.user.mention} {시간}초가 지났습니다!")

@bot.slash_command(name="나이계산", description="태어난 년도로부터 나이를 계산합니다.")
async def calculate_age(
    interaction: Interaction,
    출생년도: int = SlashOption(
        name="출생년도",
        description="본인의 태어난 연도를 입력하세요.",
        required=True,
        min_value=1900
    )
):
    current_year = datetime.now().year
    age = current_year - 출생년도
    embed = Embed(
        title="나이 계산 결과",
        description=f"출생년도 {출생년도} 기준으로 현재 나이는 {age}세입니다.",
        color=0xE74C3C
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="요일확인", description="특정 날짜의 요일을 확인합니다.")
async def check_weekday(
    interaction: Interaction,
    날짜: str = SlashOption(
        name="날짜",
        description="확인할 날짜를 YYYY-MM-DD 형식으로 입력하세요.",
        required=True
    )
):
    try:
        target_date = datetime.strptime(날짜, "%Y-%m-%d")
        weekday = target_date.strftime("%A") 
        korean_weekday = {"Monday": "월요일", "Tuesday": "화요일", "Wednesday": "수요일",
                          "Thursday": "목요일", "Friday": "금요일", "Saturday": "토요일", "Sunday": "일요일"}[weekday]
        embed = Embed(
            title="요일 확인 결과",
            description=f"{날짜}는 {korean_weekday}입니다.",
            color=0x2ECC71
        )
        await interaction.response.send_message(embed=embed)
    except ValueError:
        await interaction.response.send_message("날짜 형식이 잘못되었습니다. YYYY-MM-DD 형식으로 입력해주세요.")

@bot.slash_command(name="디데이", description="특정 날짜까지 D-Day를 계산합니다.")
async def d_day(
    interaction: Interaction,
    날짜: str = SlashOption(
        name="날짜",
        description="D-Day 날짜를 YYYY-MM-DD 형식으로 입력하세요.",
        required=True
    )
):
    try:
        target_date = datetime.strptime(날짜, "%Y-%m-%d")
        now = datetime.now()
        delta = (target_date - now).days
        if delta > 0:
            result = f"D-{delta}"
        elif delta == 0:
            result = "D-Day!"
        else:
            result = f"D+{-delta}"

        embed = Embed(
            title="D-Day 계산 결과",
            description=f"{날짜} 기준으로 {result}입니다.",
            color=0x1ABC9C
        )
        await interaction.response.send_message(embed=embed)
    except ValueError:
        await interaction.response.send_message("날짜 형식이 잘못되었습니다. YYYY-MM-DD 형식으로 입력해주세요.")

@bot.slash_command(name="삼각형넓이", description="삼각형의 넓이를 계산합니다.")
async def triangle_area(
    interaction: Interaction,
    밑변: float = SlashOption(name="밑변", description="삼각형의 밑변 길이", required=True, min_value=0),
    높이: float = SlashOption(name="높이", description="삼각형의 높이", required=True, min_value=0)
):
    result = 0.5 * 밑변 * 높이
    embed = Embed(
        title="삼각형 넓이 결과",
        description=f"밑변 {밑변}, 높이 {높이}의 삼각형 넓이 = {result}",
        color=0x1ABC9C
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="빗변", description="직각삼각형의 빗변 길이를 계산합니다.")
async def hypotenuse(
    interaction: Interaction,
    변1: float = SlashOption(name="변1", description="직각삼각형의 한 변", required=True, min_value=0),
    변2: float = SlashOption(name="변2", description="직각삼각형의 다른 변", required=True, min_value=0)
):
    result = math.sqrt(변1**2 + 변2**2)
    embed = Embed(
        title="빗변 길이 결과",
        description=f"직각삼각형에서 변 {변1}과 {변2}의 빗변 길이 = {result}",
        color=0xE67E22
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="최소공배수", description="두 정수의 최소공배수를 계산합니다.")
async def lcm(
    interaction: Interaction,
    숫자1: int = SlashOption(name="숫자1", description="첫 번째 정수", required=True),
    숫자2: int = SlashOption(name="숫자2", description="두 번째 정수", required=True)
):
    def calculate_lcm(x, y):
        return abs(x * y) // math.gcd(x, y)
    result = calculate_lcm(숫자1, 숫자2)
    embed = Embed(
        title="최소공배수 결과",
        description=f"lcm({숫자1}, {숫자2}) = {result}",
        color=0xF1C40F
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="절댓값", description="숫자의 절댓값을 계산합니다.")
async def absolute_value(
    interaction: Interaction,
    숫자: float = SlashOption(name="숫자", description="절댓값을 구할 숫자", required=True)
):
    result = abs(숫자)
    embed = Embed(
        title="절댓값 결과",
        description=f"|{숫자}| = {result}",
        color=0x00FF00
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="지수", description="e의 거듭제곱을 계산합니다.")
async def exponential(
    interaction: Interaction,
    지수: float = SlashOption(name="지수", description="e의 몇 승인지 입력", required=True)
):
    result = math.exp(지수)
    embed = Embed(
        title="지수 함수 결과",
        description=f"e^{지수} = {result}",
        color=0xFF5733
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="팩토리얼", description="정수의 팩토리얼을 계산합니다.")
async def factorial(
    interaction: Interaction,
    정수: int = SlashOption(
        name="정수", 
        description="팩토리얼을 구할 양의 정수", 
        required=True, 
        min_value=0
    )
):
    result = math.factorial(정수)
    embed = Embed(
        title="팩토리얼 결과",
        description=f"{정수}! = {result}",
        color=0x3498DB
    )
    await interaction.response.send_message(embed=embed)

@bot.slash_command(name="거듭제곱", description="숫자의 거듭제곱을 계산합니다.")
async def power(
    interaction: Interaction,
    밑: float = SlashOption(name="밑", description="거듭제곱의 밑 값", required=True),
    지수: int = SlashOption(name="지수", description="거듭제곱의 지수 값", required=True)
):
    result = 밑**지수
    embed = Embed(
        title="거듭제곱 결과",
        description=f큰")
